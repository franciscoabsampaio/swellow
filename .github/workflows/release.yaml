name: Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag version to release (e.g., v1.2.3)'
        required: true

env:
  PROJECT_NAME: swellow

jobs:
  get-version:
    if: github.ref == 'refs/heads/release'
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Validate input format
        run: |
          VERSION="${{ github.event.inputs.tag_name }}"
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION. Expected something like v1.2.3"
            exit 1
          fi

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      - name: Verify tag exists
        run: |
          VERSION="${{ github.event.inputs.tag_name }}"
          if git rev-parse "refs/tags/$VERSION" >/dev/null 2>&1; then
            echo "✅ Tag $VERSION exists"
          else
            echo "❌ Tag $VERSION does not exist in the repo"
            exit 1
          fi

      - name: Extract version from input
        id: extract_version
        run: |
          VERSION="${{ github.event.inputs.tag_name }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  promote-release:
    name: Promote Draft Release and Publish to PyPI
    needs: get-version
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/project/${{ env.PROJECT_NAME }}
    permissions:
      contents: write  # needed to create releases
      id-token: write
    steps:
      - name: Create draft release
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ env.PROJECT_NAME }} v${{ needs.get-version.outputs.version }}"
          tag_name: v${{ needs.get-version.outputs.version }}
          draft: false
          make_latest: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: release-assets/
          skip-existing: true  # Don't fail if the version already exists
          verbose: true