name: Build, Release and Publish

# This workflow is triggered on a push to a tag (e.g., v1.0.0, v2.3.1)
# or can be triggered manually for testing or special releases.
on:
  push:
    branches:
      - release
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g. v1.0.0)"
        required: true

# Define the project name once to avoid repetition.
env:
  PROJECT_NAME: swellow

jobs:
  # This initial job determines the version string to use for the release.
  # It ensures that both push-to-tag and manual dispatch triggers work correctly.
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Determine Version
        id: get_version
        run: |
          # For a push-to-tag, github.ref_name contains the tag (e.g., "v1.2.3").
          # For a manual dispatch, we use the provided input.
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "version=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "version=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          fi

  build-binaries:
    needs: [prepare]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            dir: linux-x86_64
            bin_ext: ""
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            dir: windows-x86_64
            bin_ext: ".exe"
          - target: x86_64-apple-darwin
            os: macos-latest
            dir: macos-x86_64
            bin_ext: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            dir: macos-aarch64
            bin_ext: ""
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - run: cargo build --release --target ${{ matrix.target }}

      # Upload the raw binary for the Python packaging job.
      - name: Upload raw binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: raw-binary-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}${{ matrix.bin_ext }}

      # Create a compressed archive for the GitHub release.
      # Handle different platforms.
      - name: Create release archive
        shell: bash
        run: |
          mkdir -p release
          mv target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}${{ matrix.bin_ext }} release/
          cd release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../${{ env.PROJECT_NAME }}-${{ needs.prepare.outputs.version }}-${{ matrix.target }}.zip .
          else
            tar -czvf ../${{ env.PROJECT_NAME }}-${{ needs.prepare.outputs.version }}-${{ matrix.target }}.tar.gz .
          fi

      # Upload the compressed archive for the release job.
      - name: Upload release archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-archive-${{ matrix.target }}
          path: ${{ env.PROJECT_NAME }}-${{ needs.prepare.outputs.version }}-${{ matrix.target }}.*

  # This single job handles Python packaging, release creation, asset upload,
  # and provenance generation.
  release:
    needs: [prepare, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      # Required for generating SLSA provenance.
      id-token: write
      # Required for creating the GitHub release and uploading assets.
      contents: write
      # Required for the SLSA generator to read repository information.
      actions: read
    steps:
      - uses: actions/checkout@v4

      # Create a directory to gather all assets for the release.
      - name: Create assets directory
        run: mkdir -p release-assets

      # Download all compressed binary archives into the assets directory.
      - name: Download binary archives
        uses: actions/download-artifact@v4
        with:
          pattern: release-archive-*
          path: release-assets
          merge-multiple: true

      # Download all raw binaries for inclusion in the Python package.
      - name: Download raw binaries
        uses: actions/download-artifact@v4
        with:
          pattern: raw-binary-*
          path: raw-binaries
          merge-multiple: true

      # Arrange the downloaded raw binaries into the Python source tree.
      - name: Arrange binaries for Python package
        run: |
          mkdir -p src/${{ env.PROJECT_NAME }}/bin
          find raw-binaries -type f -name "${{ env.PROJECT_NAME }}*" | while read bin; do
            target_dir=$(basename $(dirname "$bin"))
            case $target_dir in
              x86_64-unknown-linux-gnu) dir="linux-x86_64" ;;
              x86_64-pc-windows-gnu) dir="windows-x86_64" ;;
              x86_64-apple-darwin) dir="macos-x86_64" ;;
              aarch64-apple-darwin) dir="macos-aarch64" ;;
            esac
            mkdir -p src/${{ env.PROJECT_NAME }}/bin/$dir
            mv "$bin" src/${{ env.PROJECT_NAME }}/bin/$dir/
          done

      # Setup Python environment.
      - uses: astral-sh/setup-uv@v1
        with:
          python-version: "3.11"
          enable-cache: true

      # Build the Python wheel and source distribution.
      - name: Build Python package
        run: uv build

      # Move the built Python packages into the main assets directory.
      - name: Stage Python packages for release
        run: mv dist/* release-assets/

      # The SLSA generator creates the release, uploads all assets from the
      # specified directory, and attaches the generated provenance file.
      - name: Generate SLSA Provenance and create release
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
        with:
          # The tag for the release, derived from the 'prepare' job.
          release_tag: ${{ needs.prepare.outputs.version }}
          # The directory containing all assets to be uploaded and attested.
          assets-dir: release-assets

  publish-pypi:
    needs: [release]
    # Wait for approval before attempting to upload to PyPI. This allows reviewing the
    # files in the draft release.
    environment:
      name: publish
      url: https://pypi.org/project/${{github.repository}}/${{ github.ref_name }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: artifact
          path: artifact/
      - uses: pypa/gh-action-pypi-publish@f7600683efdcb7656dec5b29656edb7bc586e597 # v1.10.3
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: artifact/
      - uses: pypa/gh-action-pypi-publish@f7600683efdcb7656dec5b29656edb7bc586e597 # v1.10.3
        with:
          packages-dir: artifact/